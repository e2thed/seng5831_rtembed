
Seng5831_Assignments.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  000007de  00000872  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000007de  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000021  00800108  00800108  0000087a  2**0
                  ALLOC
  3 .stab         00001ddc  00000000  00000000  0000087c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00003013  00000000  00000000  00002658  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000030  00000000  00000000  0000566b  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000038  00000000  00000000  0000569b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000476  00000000  00000000  000056d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000274  00000000  00000000  00005b49  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000492  00000000  00000000  00005dbd  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000054  00000000  00000000  00006250  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000284  00000000  00000000  000062a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000002c0  00000000  00000000  00006528  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000028  00000000  00000000  000067e8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 17 03 	jmp	0x62e	; 0x62e <__vector_11>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ee ed       	ldi	r30, 0xDE	; 222
  a0:	f7 e0       	ldi	r31, 0x07	; 7
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a8 30       	cpi	r26, 0x08	; 8
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a8 e0       	ldi	r26, 0x08	; 8
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a9 32       	cpi	r26, 0x29	; 41
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 c4 00 	call	0x188	; 0x188 <main>
  c6:	0c 94 ed 03 	jmp	0x7da	; 0x7da <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <set_digital_output>:
	io->pinRegister = 0;
	io->portRegister = 0;
	io->ddrRegister = 0;
	io->bitmask = 0;

	if (pin < 8)			// pin 0 = PD0, ..., 7 = PD7
  ce:	88 30       	cpi	r24, 0x08	; 8
  d0:	58 f4       	brcc	.+22     	; 0xe8 <set_digital_output+0x1a>
	{
		io->pinRegister = (unsigned char*)&PIND;
		io->portRegister = (unsigned char*)&PORTD;
		io->ddrRegister = (unsigned char*)&DDRD;
		io->bitmask = 1 << pin;
  d2:	91 e0       	ldi	r25, 0x01	; 1
  d4:	01 c0       	rjmp	.+2      	; 0xd8 <set_digital_output+0xa>
  d6:	99 0f       	add	r25, r25
  d8:	8a 95       	dec	r24
  da:	ea f7       	brpl	.-6      	; 0xd6 <set_digital_output+0x8>
  dc:	89 2f       	mov	r24, r25

	if (pin < 8)			// pin 0 = PD0, ..., 7 = PD7
	{
		io->pinRegister = (unsigned char*)&PIND;
		io->portRegister = (unsigned char*)&PORTD;
		io->ddrRegister = (unsigned char*)&DDRD;
  de:	aa e2       	ldi	r26, 0x2A	; 42
  e0:	b0 e0       	ldi	r27, 0x00	; 0
	io->bitmask = 0;

	if (pin < 8)			// pin 0 = PD0, ..., 7 = PD7
	{
		io->pinRegister = (unsigned char*)&PIND;
		io->portRegister = (unsigned char*)&PORTD;
  e2:	eb e2       	ldi	r30, 0x2B	; 43
  e4:	f0 e0       	ldi	r31, 0x00	; 0
  e6:	31 c0       	rjmp	.+98     	; 0x14a <set_digital_output+0x7c>
		io->ddrRegister = (unsigned char*)&DDRD;
		io->bitmask = 1 << pin;
	}

#if defined(_ORANGUTAN_SVP) || defined(_ORANGUTAN_X2)
	else if (pin < 16)		// pin 8 = PB0, ..., 15 = PB7
  e8:	80 31       	cpi	r24, 0x10	; 16
  ea:	60 f4       	brcc	.+24     	; 0x104 <set_digital_output+0x36>
	{
		io->pinRegister = (unsigned char*)&PINB;
		io->portRegister = (unsigned char*)&PORTB;
		io->ddrRegister = (unsigned char*)&DDRB;
		io->bitmask = 1 << (pin - 8);
  ec:	98 ef       	ldi	r25, 0xF8	; 248
  ee:	98 0f       	add	r25, r24
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	01 c0       	rjmp	.+2      	; 0xf6 <set_digital_output+0x28>
  f4:	88 0f       	add	r24, r24
  f6:	9a 95       	dec	r25
  f8:	ea f7       	brpl	.-6      	; 0xf4 <set_digital_output+0x26>
#if defined(_ORANGUTAN_SVP) || defined(_ORANGUTAN_X2)
	else if (pin < 16)		// pin 8 = PB0, ..., 15 = PB7
	{
		io->pinRegister = (unsigned char*)&PINB;
		io->portRegister = (unsigned char*)&PORTB;
		io->ddrRegister = (unsigned char*)&DDRB;
  fa:	a4 e2       	ldi	r26, 0x24	; 36
  fc:	b0 e0       	ldi	r27, 0x00	; 0

#if defined(_ORANGUTAN_SVP) || defined(_ORANGUTAN_X2)
	else if (pin < 16)		// pin 8 = PB0, ..., 15 = PB7
	{
		io->pinRegister = (unsigned char*)&PINB;
		io->portRegister = (unsigned char*)&PORTB;
  fe:	e5 e2       	ldi	r30, 0x25	; 37
 100:	f0 e0       	ldi	r31, 0x00	; 0
 102:	23 c0       	rjmp	.+70     	; 0x14a <set_digital_output+0x7c>
		io->ddrRegister = (unsigned char*)&DDRB;
		io->bitmask = 1 << (pin - 8);
	}
	else if (pin < 24)		// pin 16 = PC0, ..., 23 = PC7
 104:	88 31       	cpi	r24, 0x18	; 24
 106:	60 f4       	brcc	.+24     	; 0x120 <set_digital_output+0x52>
	{
		io->pinRegister = (unsigned char*)&PINC;
		io->portRegister = (unsigned char*)&PORTC;
		io->ddrRegister = (unsigned char*)&DDRC;
		io->bitmask = 1 << (pin - 16);
 108:	90 ef       	ldi	r25, 0xF0	; 240
 10a:	98 0f       	add	r25, r24
 10c:	81 e0       	ldi	r24, 0x01	; 1
 10e:	01 c0       	rjmp	.+2      	; 0x112 <set_digital_output+0x44>
 110:	88 0f       	add	r24, r24
 112:	9a 95       	dec	r25
 114:	ea f7       	brpl	.-6      	; 0x110 <set_digital_output+0x42>
	}
	else if (pin < 24)		// pin 16 = PC0, ..., 23 = PC7
	{
		io->pinRegister = (unsigned char*)&PINC;
		io->portRegister = (unsigned char*)&PORTC;
		io->ddrRegister = (unsigned char*)&DDRC;
 116:	a7 e2       	ldi	r26, 0x27	; 39
 118:	b0 e0       	ldi	r27, 0x00	; 0
		io->bitmask = 1 << (pin - 8);
	}
	else if (pin < 24)		// pin 16 = PC0, ..., 23 = PC7
	{
		io->pinRegister = (unsigned char*)&PINC;
		io->portRegister = (unsigned char*)&PORTC;
 11a:	e8 e2       	ldi	r30, 0x28	; 40
 11c:	f0 e0       	ldi	r31, 0x00	; 0
 11e:	15 c0       	rjmp	.+42     	; 0x14a <set_digital_output+0x7c>
		io->ddrRegister = (unsigned char*)&DDRC;
		io->bitmask = 1 << (pin - 16);
	}
	else if (pin < 32)		// pin 24 = PA7, ..., 31 = PA0
 120:	80 32       	cpi	r24, 0x20	; 32
 122:	70 f4       	brcc	.+28     	; 0x140 <set_digital_output+0x72>
	{
		io->pinRegister = (unsigned char*)&PINA;
		io->portRegister = (unsigned char*)&PORTA;
		io->ddrRegister = (unsigned char*)&DDRA;
		io->bitmask = 1 << (31 - pin);
 124:	2f e1       	ldi	r18, 0x1F	; 31
 126:	30 e0       	ldi	r19, 0x00	; 0
 128:	28 1b       	sub	r18, r24
 12a:	31 09       	sbc	r19, r1
 12c:	81 e0       	ldi	r24, 0x01	; 1
 12e:	01 c0       	rjmp	.+2      	; 0x132 <set_digital_output+0x64>
 130:	88 0f       	add	r24, r24
 132:	2a 95       	dec	r18
 134:	ea f7       	brpl	.-6      	; 0x130 <set_digital_output+0x62>
	}
	else if (pin < 32)		// pin 24 = PA7, ..., 31 = PA0
	{
		io->pinRegister = (unsigned char*)&PINA;
		io->portRegister = (unsigned char*)&PORTA;
		io->ddrRegister = (unsigned char*)&DDRA;
 136:	a1 e2       	ldi	r26, 0x21	; 33
 138:	b0 e0       	ldi	r27, 0x00	; 0
		io->bitmask = 1 << (pin - 16);
	}
	else if (pin < 32)		// pin 24 = PA7, ..., 31 = PA0
	{
		io->pinRegister = (unsigned char*)&PINA;
		io->portRegister = (unsigned char*)&PORTA;
 13a:	e2 e2       	ldi	r30, 0x22	; 34
 13c:	f0 e0       	ldi	r31, 0x00	; 0
 13e:	05 c0       	rjmp	.+10     	; 0x14a <set_digital_output+0x7c>
static inline void get_io_registers(struct IOStruct* io, unsigned char pin)
{
	io->pinRegister = 0;
	io->portRegister = 0;
	io->ddrRegister = 0;
	io->bitmask = 0;
 140:	80 e0       	ldi	r24, 0x00	; 0
// 1 in the position of the specified pin and 0s everywhere else.
static inline void get_io_registers(struct IOStruct* io, unsigned char pin)
{
	io->pinRegister = 0;
	io->portRegister = 0;
	io->ddrRegister = 0;
 142:	a0 e0       	ldi	r26, 0x00	; 0
 144:	b0 e0       	ldi	r27, 0x00	; 0
// with the specified pin (DDR, PORT, and PIN) along with a bitmask with a
// 1 in the position of the specified pin and 0s everywhere else.
static inline void get_io_registers(struct IOStruct* io, unsigned char pin)
{
	io->pinRegister = 0;
	io->portRegister = 0;
 146:	e0 e0       	ldi	r30, 0x00	; 0
 148:	f0 e0       	ldi	r31, 0x00	; 0
// setting it as high-impedance (val = 0) or enabling the internal pull-up (val = 1).  If the pin is an
// output, this lets you choose between driving low (val = 0) and driving high (val = 1).
// NOTE: if val is 0xFF (255), this method will toggle the PORT register pin(s).
static inline void set_digital_output_value(struct IOStruct* ioPin, unsigned char val)
{
	if (val == 0xFF)
 14a:	6f 3f       	cpi	r22, 0xFF	; 255
 14c:	19 f4       	brne	.+6      	; 0x154 <set_digital_output+0x86>
		*(ioPin->portRegister) ^= ioPin->bitmask;
 14e:	90 81       	ld	r25, Z
 150:	98 27       	eor	r25, r24
 152:	09 c0       	rjmp	.+18     	; 0x166 <set_digital_output+0x98>
	else if (val)
 154:	66 23       	and	r22, r22
 156:	19 f0       	breq	.+6      	; 0x15e <set_digital_output+0x90>
		*(ioPin->portRegister) |= ioPin->bitmask;
 158:	90 81       	ld	r25, Z
 15a:	98 2b       	or	r25, r24
 15c:	04 c0       	rjmp	.+8      	; 0x166 <set_digital_output+0x98>
	else
		*(ioPin->portRegister) &= ~ioPin->bitmask;
 15e:	20 81       	ld	r18, Z
 160:	98 2f       	mov	r25, r24
 162:	90 95       	com	r25
 164:	92 23       	and	r25, r18
 166:	90 83       	st	Z, r25
// low-level method for setting the data direction (i.e. input or output) of an pin or set of pins
// described by an IOStruct pointer.
static inline void set_data_direction(struct IOStruct* ioPin, unsigned char val)
{
	if (val)
		*(ioPin->ddrRegister) |= ioPin->bitmask;
 168:	9c 91       	ld	r25, X
 16a:	98 2b       	or	r25, r24
 16c:	9c 93       	st	X, r25
 16e:	08 95       	ret

00000170 <red_led>:
// one LED (the red one), so green() will just drive I/O line PD7
// high or low, depending on the argument.
static inline void red_led(unsigned char on)
{
	#if defined (_ORANGUTAN_SVP)	// red LED turns on when driven low
	if (on == TOGGLE)
 170:	8f 3f       	cpi	r24, 0xFF	; 255
 172:	11 f4       	brne	.+4      	; 0x178 <red_led+0x8>
		set_digital_output(RED_LED, TOGGLE);
 174:	6f ef       	ldi	r22, 0xFF	; 255
 176:	05 c0       	rjmp	.+10     	; 0x182 <red_led+0x12>
	else if (on == LOW)
 178:	81 11       	cpse	r24, r1
 17a:	02 c0       	rjmp	.+4      	; 0x180 <red_led+0x10>
		set_digital_output(RED_LED, HIGH);
 17c:	61 e0       	ldi	r22, 0x01	; 1
 17e:	01 c0       	rjmp	.+2      	; 0x182 <red_led+0x12>
	else
		set_digital_output(RED_LED, LOW);
 180:	60 e0       	ldi	r22, 0x00	; 0
 182:	81 e0       	ldi	r24, 0x01	; 1
 184:	0c 94 67 00 	jmp	0xce	; 0xce <set_digital_output>

00000188 <main>:
	unsigned char toggle_green = 0;
	unsigned char toggle_red = 0;
	unsigned char green_state = 0;
	unsigned char red_state = 0;
	
	time_reset();
 188:	0e 94 b3 03 	call	0x766	; 0x766 <time_reset>
	unsigned long mytimer = get_ms();
 18c:	0e 94 99 03 	call	0x732	; 0x732 <get_ms>
 190:	6b 01       	movw	r12, r22
 192:	7c 01       	movw	r14, r24
	
	clear();
 194:	0e 94 31 02 	call	0x462	; 0x462 <clear>
	print("Ready");
 198:	82 e0       	ldi	r24, 0x02	; 2
 19a:	91 e0       	ldi	r25, 0x01	; 1
 19c:	0e 94 48 02 	call	0x490	; 0x490 <print>
{
	unsigned long blink_rate = 500;
	unsigned char toggle_green = 0;
	unsigned char toggle_red = 0;
	unsigned char green_state = 0;
	unsigned char red_state = 0;
 1a0:	b1 2c       	mov	r11, r1
int main()
{
	unsigned long blink_rate = 500;
	unsigned char toggle_green = 0;
	unsigned char toggle_red = 0;
	unsigned char green_state = 0;
 1a2:	00 e0       	ldi	r16, 0x00	; 0

int main()
{
	unsigned long blink_rate = 500;
	unsigned char toggle_green = 0;
	unsigned char toggle_red = 0;
 1a4:	c0 e0       	ldi	r28, 0x00	; 0
#include <pololu/orangutan.h>

int main()
{
	unsigned long blink_rate = 500;
	unsigned char toggle_green = 0;
 1a6:	d0 e0       	ldi	r29, 0x00	; 0
 1a8:	11 e0       	ldi	r17, 0x01	; 1
	print("Ready");
	while(1)
	{
		// when either the top or bottom buttons is pressed
		// store the value of the pressed button in the variable 'button'
		unsigned char button = get_single_debounced_button_press(ANY_BUTTON);
 1aa:	8c e2       	ldi	r24, 0x2C	; 44
 1ac:	0e 94 0c 03 	call	0x618	; 0x618 <get_single_debounced_button_press>
 1b0:	a8 2e       	mov	r10, r24
		
		// Evaluate pressed button
		// change led state then set led to that state
		if (button & TOP_BUTTON)
 1b2:	85 ff       	sbrs	r24, 5
 1b4:	05 c0       	rjmp	.+10     	; 0x1c0 <main+0x38>
 1b6:	d1 27       	eor	r29, r17
	#endif
}
	
static inline void green_led(unsigned char on)
{
	set_digital_output(GREEN_LED, on);
 1b8:	6d 2f       	mov	r22, r29
 1ba:	84 e1       	ldi	r24, 0x14	; 20
 1bc:	0e 94 67 00 	call	0xce	; 0xce <set_digital_output>
		{
			toggle_green=!toggle_green;
			green_led(toggle_green);
		}
		if (button & BOTTOM_BUTTON)
 1c0:	a2 fe       	sbrs	r10, 2
 1c2:	04 c0       	rjmp	.+8      	; 0x1cc <main+0x44>
 1c4:	c1 27       	eor	r28, r17
		{
			toggle_red=!toggle_red;
			red_led(toggle_red);
 1c6:	8c 2f       	mov	r24, r28
 1c8:	0e 94 b8 00 	call	0x170	; 0x170 <red_led>
		}
		
		// when the toggle value is active 
		// blink the led
		if (toggle_green && (mytimer >= blink_rate))
 1cc:	dd 23       	and	r29, r29
 1ce:	79 f0       	breq	.+30     	; 0x1ee <main+0x66>
 1d0:	84 ef       	ldi	r24, 0xF4	; 244
 1d2:	c8 16       	cp	r12, r24
 1d4:	81 e0       	ldi	r24, 0x01	; 1
 1d6:	d8 06       	cpc	r13, r24
 1d8:	e1 04       	cpc	r14, r1
 1da:	f1 04       	cpc	r15, r1
 1dc:	f8 f0       	brcs	.+62     	; 0x21c <main+0x94>
 1de:	01 27       	eor	r16, r17
 1e0:	60 2f       	mov	r22, r16
 1e2:	84 e1       	ldi	r24, 0x14	; 20
 1e4:	0e 94 67 00 	call	0xce	; 0xce <set_digital_output>
		{
			green_state = !green_state;
			green_led(green_state);
		}		
		if (toggle_red && (mytimer >= blink_rate))
 1e8:	c1 11       	cpse	r28, r1
 1ea:	0a c0       	rjmp	.+20     	; 0x200 <main+0x78>
 1ec:	15 c0       	rjmp	.+42     	; 0x218 <main+0x90>
 1ee:	cc 23       	and	r28, r28
 1f0:	61 f0       	breq	.+24     	; 0x20a <main+0x82>
 1f2:	84 ef       	ldi	r24, 0xF4	; 244
 1f4:	c8 16       	cp	r12, r24
 1f6:	81 e0       	ldi	r24, 0x01	; 1
 1f8:	d8 06       	cpc	r13, r24
 1fa:	e1 04       	cpc	r14, r1
 1fc:	f1 04       	cpc	r15, r1
 1fe:	70 f0       	brcs	.+28     	; 0x21c <main+0x94>
		{
			red_state = !red_state;
 200:	b1 26       	eor	r11, r17
			red_led(red_state);
 202:	8b 2d       	mov	r24, r11
 204:	0e 94 b8 00 	call	0x170	; 0x170 <red_led>
 208:	07 c0       	rjmp	.+14     	; 0x218 <main+0x90>
		}
		
		// reset timer after the limit has been breached
		if (mytimer >= blink_rate)
 20a:	84 ef       	ldi	r24, 0xF4	; 244
 20c:	c8 16       	cp	r12, r24
 20e:	81 e0       	ldi	r24, 0x01	; 1
 210:	d8 06       	cpc	r13, r24
 212:	e1 04       	cpc	r14, r1
 214:	f1 04       	cpc	r15, r1
 216:	10 f0       	brcs	.+4      	; 0x21c <main+0x94>
		{
			time_reset();
 218:	0e 94 b3 03 	call	0x766	; 0x766 <time_reset>
		}

		// increment timer
		mytimer = get_ms();
 21c:	0e 94 99 03 	call	0x732	; 0x732 <get_ms>
 220:	6b 01       	movw	r12, r22
 222:	7c 01       	movw	r14, r24
		
	}
 224:	c2 cf       	rjmp	.-124    	; 0x1aa <main+0x22>

00000226 <delayMicroseconds.clone.0>:
 226:	81 e0       	ldi	r24, 0x01	; 1
 228:	90 e0       	ldi	r25, 0x00	; 0
 22a:	6f 93       	push	r22
 22c:	64 e0       	ldi	r22, 0x04	; 4
 22e:	6a 95       	dec	r22
 230:	f1 f7       	brne	.-4      	; 0x22e <delayMicroseconds.clone.0+0x8>
 232:	6f 91       	pop	r22
 234:	01 97       	sbiw	r24, 0x01	; 1
 236:	c9 f7       	brne	.-14     	; 0x22a <delayMicroseconds.clone.0+0x4>
 238:	08 95       	ret

0000023a <_ZN12OrangutanLCD8busyWaitEv>:
 23a:	0f 93       	push	r16
 23c:	1f 93       	push	r17
 23e:	cf 93       	push	r28
 240:	df 93       	push	r29
 242:	17 b1       	in	r17, 0x07	; 7
 244:	3d 98       	cbi	0x07, 5	; 7
 246:	28 98       	cbi	0x05, 0	; 5
 248:	29 9a       	sbi	0x05, 1	; 5
 24a:	c0 e0       	ldi	r28, 0x00	; 0
 24c:	d0 e0       	ldi	r29, 0x00	; 0
 24e:	0e 94 13 01 	call	0x226	; 0x226 <delayMicroseconds.clone.0>
 252:	2a 9a       	sbi	0x05, 2	; 5
 254:	0e 94 13 01 	call	0x226	; 0x226 <delayMicroseconds.clone.0>
 258:	06 b1       	in	r16, 0x06	; 6
 25a:	2a 98       	cbi	0x05, 2	; 5
 25c:	0e 94 13 01 	call	0x226	; 0x226 <delayMicroseconds.clone.0>
 260:	2a 9a       	sbi	0x05, 2	; 5
 262:	0e 94 13 01 	call	0x226	; 0x226 <delayMicroseconds.clone.0>
 266:	2a 98       	cbi	0x05, 2	; 5
 268:	24 96       	adiw	r28, 0x04	; 4
 26a:	05 ff       	sbrs	r16, 5
 26c:	10 c0       	rjmp	.+32     	; 0x28e <_ZN12OrangutanLCD8busyWaitEv+0x54>
 26e:	9e 01       	movw	r18, r28
 270:	40 e0       	ldi	r20, 0x00	; 0
 272:	50 e0       	ldi	r21, 0x00	; 0
 274:	80 91 0c 01 	lds	r24, 0x010C
 278:	90 91 0d 01 	lds	r25, 0x010D
 27c:	a0 91 0e 01 	lds	r26, 0x010E
 280:	b0 91 0f 01 	lds	r27, 0x010F
 284:	28 17       	cp	r18, r24
 286:	39 07       	cpc	r19, r25
 288:	4a 07       	cpc	r20, r26
 28a:	5b 07       	cpc	r21, r27
 28c:	00 f3       	brcs	.-64     	; 0x24e <_ZN12OrangutanLCD8busyWaitEv+0x14>
 28e:	9e 01       	movw	r18, r28
 290:	40 e0       	ldi	r20, 0x00	; 0
 292:	50 e0       	ldi	r21, 0x00	; 0
 294:	80 91 0c 01 	lds	r24, 0x010C
 298:	90 91 0d 01 	lds	r25, 0x010D
 29c:	a0 91 0e 01 	lds	r26, 0x010E
 2a0:	b0 91 0f 01 	lds	r27, 0x010F
 2a4:	28 17       	cp	r18, r24
 2a6:	39 07       	cpc	r19, r25
 2a8:	4a 07       	cpc	r20, r26
 2aa:	5b 07       	cpc	r21, r27
 2ac:	28 f0       	brcs	.+10     	; 0x2b8 <_ZN12OrangutanLCD8busyWaitEv+0x7e>
 2ae:	82 e3       	ldi	r24, 0x32	; 50
 2b0:	90 e0       	ldi	r25, 0x00	; 0
 2b2:	a0 e0       	ldi	r26, 0x00	; 0
 2b4:	b0 e0       	ldi	r27, 0x00	; 0
 2b6:	04 c0       	rjmp	.+8      	; 0x2c0 <_ZN12OrangutanLCD8busyWaitEv+0x86>
 2b8:	80 e3       	ldi	r24, 0x30	; 48
 2ba:	95 e7       	ldi	r25, 0x75	; 117
 2bc:	a0 e0       	ldi	r26, 0x00	; 0
 2be:	b0 e0       	ldi	r27, 0x00	; 0
 2c0:	80 93 0c 01 	sts	0x010C, r24
 2c4:	90 93 0d 01 	sts	0x010D, r25
 2c8:	a0 93 0e 01 	sts	0x010E, r26
 2cc:	b0 93 0f 01 	sts	0x010F, r27
 2d0:	17 b9       	out	0x07, r17	; 7
 2d2:	df 91       	pop	r29
 2d4:	cf 91       	pop	r28
 2d6:	1f 91       	pop	r17
 2d8:	0f 91       	pop	r16
 2da:	08 95       	ret

000002dc <_ZN12OrangutanLCD8sendDataEh>:
 2dc:	28 b1       	in	r18, 0x08	; 8
 2de:	90 e0       	ldi	r25, 0x00	; 0
 2e0:	8f 70       	andi	r24, 0x0F	; 15
 2e2:	90 70       	andi	r25, 0x00	; 0
 2e4:	88 0f       	add	r24, r24
 2e6:	99 1f       	adc	r25, r25
 2e8:	88 0f       	add	r24, r24
 2ea:	99 1f       	adc	r25, r25
 2ec:	23 7c       	andi	r18, 0xC3	; 195
 2ee:	28 2b       	or	r18, r24
 2f0:	28 b9       	out	0x08, r18	; 8
 2f2:	2a 9a       	sbi	0x05, 2	; 5
 2f4:	0e 94 13 01 	call	0x226	; 0x226 <delayMicroseconds.clone.0>
 2f8:	2a 98       	cbi	0x05, 2	; 5
 2fa:	0e 94 13 01 	call	0x226	; 0x226 <delayMicroseconds.clone.0>
 2fe:	08 95       	ret

00000300 <_ZN12OrangutanLCD4sendEhhh>:
 300:	a2 e0       	ldi	r26, 0x02	; 2
 302:	b0 e0       	ldi	r27, 0x00	; 0
 304:	e6 e8       	ldi	r30, 0x86	; 134
 306:	f1 e0       	ldi	r31, 0x01	; 1
 308:	0c 94 c3 03 	jmp	0x786	; 0x786 <__prologue_saves__+0x1a>
 30c:	18 2f       	mov	r17, r24
 30e:	4a 83       	std	Y+2, r20	; 0x02
 310:	69 83       	std	Y+1, r22	; 0x01
 312:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <_ZN12OrangutanLCD4initEv>
 316:	0e 94 1d 01 	call	0x23a	; 0x23a <_ZN12OrangutanLCD8busyWaitEv>
 31a:	f7 b0       	in	r15, 0x07	; 7
 31c:	08 b1       	in	r16, 0x08	; 8
 31e:	29 98       	cbi	0x05, 1	; 5
 320:	69 81       	ldd	r22, Y+1	; 0x01
 322:	4a 81       	ldd	r20, Y+2	; 0x02
 324:	66 23       	and	r22, r22
 326:	11 f0       	breq	.+4      	; 0x32c <_ZN12OrangutanLCD4sendEhhh+0x2c>
 328:	28 9a       	sbi	0x05, 0	; 5
 32a:	01 c0       	rjmp	.+2      	; 0x32e <_ZN12OrangutanLCD4sendEhhh+0x2e>
 32c:	28 98       	cbi	0x05, 0	; 5
 32e:	87 b1       	in	r24, 0x07	; 7
 330:	8c 63       	ori	r24, 0x3C	; 60
 332:	87 b9       	out	0x07, r24	; 7
 334:	41 30       	cpi	r20, 0x01	; 1
 336:	29 f0       	breq	.+10     	; 0x342 <_ZN12OrangutanLCD4sendEhhh+0x42>
 338:	81 2f       	mov	r24, r17
 33a:	82 95       	swap	r24
 33c:	8f 70       	andi	r24, 0x0F	; 15
 33e:	0e 94 6e 01 	call	0x2dc	; 0x2dc <_ZN12OrangutanLCD8sendDataEh>
 342:	81 2f       	mov	r24, r17
 344:	8f 70       	andi	r24, 0x0F	; 15
 346:	0e 94 6e 01 	call	0x2dc	; 0x2dc <_ZN12OrangutanLCD8sendDataEh>
 34a:	f7 b8       	out	0x07, r15	; 7
 34c:	08 b9       	out	0x08, r16	; 8
 34e:	22 96       	adiw	r28, 0x02	; 2
 350:	e5 e0       	ldi	r30, 0x05	; 5
 352:	0c 94 df 03 	jmp	0x7be	; 0x7be <__epilogue_restores__+0x1a>

00000356 <_ZN12OrangutanLCD8send_cmdEh>:
 356:	60 e0       	ldi	r22, 0x00	; 0
 358:	42 e0       	ldi	r20, 0x02	; 2
 35a:	0e 94 80 01 	call	0x300	; 0x300 <_ZN12OrangutanLCD4sendEhhh>
 35e:	08 95       	ret

00000360 <_ZN12OrangutanLCD9send_dataEh>:
 360:	61 e0       	ldi	r22, 0x01	; 1
 362:	42 e0       	ldi	r20, 0x02	; 2
 364:	0e 94 80 01 	call	0x300	; 0x300 <_ZN12OrangutanLCD4sendEhhh>
 368:	08 95       	ret

0000036a <_ZN12OrangutanLCD13send_4bit_cmdEh>:
 36a:	60 e0       	ldi	r22, 0x00	; 0
 36c:	41 e0       	ldi	r20, 0x01	; 1
 36e:	0e 94 80 01 	call	0x300	; 0x300 <_ZN12OrangutanLCD4sendEhhh>
 372:	08 95       	ret

00000374 <_ZN12OrangutanLCD5init2Ev>:
 374:	3d 98       	cbi	0x07, 5	; 7
 376:	45 9a       	sbi	0x08, 5	; 8
 378:	80 e3       	ldi	r24, 0x30	; 48
 37a:	95 e7       	ldi	r25, 0x75	; 117
 37c:	a0 e0       	ldi	r26, 0x00	; 0
 37e:	b0 e0       	ldi	r27, 0x00	; 0
 380:	80 93 0c 01 	sts	0x010C, r24
 384:	90 93 0d 01 	sts	0x010D, r25
 388:	a0 93 0e 01 	sts	0x010E, r26
 38c:	b0 93 0f 01 	sts	0x010F, r27
 390:	20 9a       	sbi	0x04, 0	; 4
 392:	21 9a       	sbi	0x04, 1	; 4
 394:	22 9a       	sbi	0x04, 2	; 4
 396:	8e e1       	ldi	r24, 0x1E	; 30
 398:	90 e0       	ldi	r25, 0x00	; 0
 39a:	0e 94 5f 03 	call	0x6be	; 0x6be <delay_ms>
 39e:	83 e0       	ldi	r24, 0x03	; 3
 3a0:	0e 94 b5 01 	call	0x36a	; 0x36a <_ZN12OrangutanLCD13send_4bit_cmdEh>
 3a4:	86 e0       	ldi	r24, 0x06	; 6
 3a6:	90 e0       	ldi	r25, 0x00	; 0
 3a8:	0e 94 5f 03 	call	0x6be	; 0x6be <delay_ms>
 3ac:	83 e0       	ldi	r24, 0x03	; 3
 3ae:	0e 94 b5 01 	call	0x36a	; 0x36a <_ZN12OrangutanLCD13send_4bit_cmdEh>
 3b2:	82 e0       	ldi	r24, 0x02	; 2
 3b4:	90 e0       	ldi	r25, 0x00	; 0
 3b6:	0e 94 5f 03 	call	0x6be	; 0x6be <delay_ms>
 3ba:	83 e0       	ldi	r24, 0x03	; 3
 3bc:	0e 94 b5 01 	call	0x36a	; 0x36a <_ZN12OrangutanLCD13send_4bit_cmdEh>
 3c0:	82 e0       	ldi	r24, 0x02	; 2
 3c2:	90 e0       	ldi	r25, 0x00	; 0
 3c4:	0e 94 5f 03 	call	0x6be	; 0x6be <delay_ms>
 3c8:	82 e0       	ldi	r24, 0x02	; 2
 3ca:	0e 94 b5 01 	call	0x36a	; 0x36a <_ZN12OrangutanLCD13send_4bit_cmdEh>
 3ce:	82 e0       	ldi	r24, 0x02	; 2
 3d0:	90 e0       	ldi	r25, 0x00	; 0
 3d2:	0e 94 5f 03 	call	0x6be	; 0x6be <delay_ms>
 3d6:	88 e2       	ldi	r24, 0x28	; 40
 3d8:	0e 94 ab 01 	call	0x356	; 0x356 <_ZN12OrangutanLCD8send_cmdEh>
 3dc:	88 e0       	ldi	r24, 0x08	; 8
 3de:	0e 94 ab 01 	call	0x356	; 0x356 <_ZN12OrangutanLCD8send_cmdEh>
 3e2:	81 e0       	ldi	r24, 0x01	; 1
 3e4:	0e 94 ab 01 	call	0x356	; 0x356 <_ZN12OrangutanLCD8send_cmdEh>
 3e8:	86 e0       	ldi	r24, 0x06	; 6
 3ea:	0e 94 ab 01 	call	0x356	; 0x356 <_ZN12OrangutanLCD8send_cmdEh>
 3ee:	8c e0       	ldi	r24, 0x0C	; 12
 3f0:	0e 94 ab 01 	call	0x356	; 0x356 <_ZN12OrangutanLCD8send_cmdEh>
 3f4:	08 95       	ret

000003f6 <_ZN12OrangutanLCD4initEv>:
 3f6:	80 91 10 01 	lds	r24, 0x0110
 3fa:	88 23       	and	r24, r24
 3fc:	29 f4       	brne	.+10     	; 0x408 <_ZN12OrangutanLCD4initEv+0x12>
 3fe:	81 e0       	ldi	r24, 0x01	; 1
 400:	80 93 10 01 	sts	0x0110, r24
 404:	0e 94 ba 01 	call	0x374	; 0x374 <_ZN12OrangutanLCD5init2Ev>
 408:	08 95       	ret

0000040a <_ZN12OrangutanLCD5clearEv>:
 40a:	81 e0       	ldi	r24, 0x01	; 1
 40c:	0e 94 ab 01 	call	0x356	; 0x356 <_ZN12OrangutanLCD8send_cmdEh>
 410:	80 91 08 01 	lds	r24, 0x0108
 414:	90 91 09 01 	lds	r25, 0x0109
 418:	00 97       	sbiw	r24, 0x00	; 0
 41a:	11 f1       	breq	.+68     	; 0x460 <_ZN12OrangutanLCD5clearEv+0x56>
 41c:	a0 e0       	ldi	r26, 0x00	; 0
 41e:	b0 e2       	ldi	r27, 0x20	; 32
 420:	08 c0       	rjmp	.+16     	; 0x432 <_ZN12OrangutanLCD5clearEv+0x28>
 422:	e0 91 08 01 	lds	r30, 0x0108
 426:	f0 91 09 01 	lds	r31, 0x0109
 42a:	e2 0f       	add	r30, r18
 42c:	f3 1f       	adc	r31, r19
 42e:	b0 83       	st	Z, r27
 430:	af 5f       	subi	r26, 0xFF	; 255
 432:	2a 2f       	mov	r18, r26
 434:	30 e0       	ldi	r19, 0x00	; 0
 436:	80 91 00 01 	lds	r24, 0x0100
 43a:	90 e0       	ldi	r25, 0x00	; 0
 43c:	01 97       	sbiw	r24, 0x01	; 1
 43e:	60 91 01 01 	lds	r22, 0x0101
 442:	70 e0       	ldi	r23, 0x00	; 0
 444:	86 9f       	mul	r24, r22
 446:	a0 01       	movw	r20, r0
 448:	87 9f       	mul	r24, r23
 44a:	50 0d       	add	r21, r0
 44c:	96 9f       	mul	r25, r22
 44e:	50 0d       	add	r21, r0
 450:	11 24       	eor	r1, r1
 452:	24 17       	cp	r18, r20
 454:	35 07       	cpc	r19, r21
 456:	2c f3       	brlt	.-54     	; 0x422 <_ZN12OrangutanLCD5clearEv+0x18>
 458:	10 92 0b 01 	sts	0x010B, r1
 45c:	10 92 0a 01 	sts	0x010A, r1
 460:	08 95       	ret

00000462 <clear>:
 462:	0e 94 05 02 	call	0x40a	; 0x40a <_ZN12OrangutanLCD5clearEv>
 466:	08 95       	ret

00000468 <_ZN12OrangutanLCD5printEPKc>:
 468:	ef 92       	push	r14
 46a:	ff 92       	push	r15
 46c:	cf 93       	push	r28
 46e:	df 93       	push	r29
 470:	e8 2e       	mov	r14, r24
 472:	e7 01       	movw	r28, r14
 474:	7e 01       	movw	r14, r28
 476:	f9 2e       	mov	r15, r25
 478:	e7 01       	movw	r28, r14
 47a:	02 c0       	rjmp	.+4      	; 0x480 <_ZN12OrangutanLCD5printEPKc+0x18>
 47c:	0e 94 b0 01 	call	0x360	; 0x360 <_ZN12OrangutanLCD9send_dataEh>
 480:	89 91       	ld	r24, Y+
 482:	88 23       	and	r24, r24
 484:	d9 f7       	brne	.-10     	; 0x47c <_ZN12OrangutanLCD5printEPKc+0x14>
 486:	df 91       	pop	r29
 488:	cf 91       	pop	r28
 48a:	ff 90       	pop	r15
 48c:	ef 90       	pop	r14
 48e:	08 95       	ret

00000490 <print>:
 490:	0e 94 34 02 	call	0x468	; 0x468 <_ZN12OrangutanLCD5printEPKc>
 494:	08 95       	ret

00000496 <_ZN20OrangutanPushbuttons5init2Ev>:
 496:	87 b1       	in	r24, 0x07	; 7
 498:	83 7d       	andi	r24, 0xD3	; 211
 49a:	87 b9       	out	0x07, r24	; 7
 49c:	88 b1       	in	r24, 0x08	; 8
 49e:	8c 62       	ori	r24, 0x2C	; 44
 4a0:	88 b9       	out	0x08, r24	; 8
 4a2:	85 e0       	ldi	r24, 0x05	; 5
 4a4:	90 e0       	ldi	r25, 0x00	; 0
 4a6:	6f 93       	push	r22
 4a8:	64 e0       	ldi	r22, 0x04	; 4
 4aa:	6a 95       	dec	r22
 4ac:	f1 f7       	brne	.-4      	; 0x4aa <_ZN20OrangutanPushbuttons5init2Ev+0x14>
 4ae:	6f 91       	pop	r22
 4b0:	01 97       	sbiw	r24, 0x01	; 1
 4b2:	c9 f7       	brne	.-14     	; 0x4a6 <_ZN20OrangutanPushbuttons5init2Ev+0x10>
 4b4:	08 95       	ret

000004b6 <_ZN20OrangutanPushbuttons4initEv>:
 4b6:	80 91 11 01 	lds	r24, 0x0111
 4ba:	88 23       	and	r24, r24
 4bc:	29 f4       	brne	.+10     	; 0x4c8 <_ZN20OrangutanPushbuttons4initEv+0x12>
 4be:	81 e0       	ldi	r24, 0x01	; 1
 4c0:	80 93 11 01 	sts	0x0111, r24
 4c4:	0e 94 4b 02 	call	0x496	; 0x496 <_ZN20OrangutanPushbuttons5init2Ev>
 4c8:	08 95       	ret

000004ca <_ZN20OrangutanPushbuttons23getSingleDebouncedPressEh>:
 4ca:	bf 92       	push	r11
 4cc:	cf 92       	push	r12
 4ce:	df 92       	push	r13
 4d0:	ef 92       	push	r14
 4d2:	ff 92       	push	r15
 4d4:	0f 93       	push	r16
 4d6:	1f 93       	push	r17
 4d8:	b8 2e       	mov	r11, r24
 4da:	c6 b0       	in	r12, 0x06	; 6
 4dc:	dc 2c       	mov	r13, r12
 4de:	d0 94       	com	r13
 4e0:	0e 94 99 03 	call	0x732	; 0x732 <get_ms>
 4e4:	7b 01       	movw	r14, r22
 4e6:	8c 01       	movw	r16, r24
 4e8:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <_ZN20OrangutanPushbuttons4initEv>
 4ec:	80 91 1d 01 	lds	r24, 0x011D
 4f0:	81 30       	cpi	r24, 0x01	; 1
 4f2:	21 f1       	breq	.+72     	; 0x53c <_ZN20OrangutanPushbuttons23getSingleDebouncedPressEh+0x72>
 4f4:	81 30       	cpi	r24, 0x01	; 1
 4f6:	38 f0       	brcs	.+14     	; 0x506 <_ZN20OrangutanPushbuttons23getSingleDebouncedPressEh+0x3c>
 4f8:	82 30       	cpi	r24, 0x02	; 2
 4fa:	09 f4       	brne	.+2      	; 0x4fe <_ZN20OrangutanPushbuttons23getSingleDebouncedPressEh+0x34>
 4fc:	45 c0       	rjmp	.+138    	; 0x588 <_ZN20OrangutanPushbuttons23getSingleDebouncedPressEh+0xbe>
 4fe:	83 30       	cpi	r24, 0x03	; 3
 500:	09 f0       	breq	.+2      	; 0x504 <_ZN20OrangutanPushbuttons23getSingleDebouncedPressEh+0x3a>
 502:	81 c0       	rjmp	.+258    	; 0x606 <_ZN20OrangutanPushbuttons23getSingleDebouncedPressEh+0x13c>
 504:	63 c0       	rjmp	.+198    	; 0x5cc <_ZN20OrangutanPushbuttons23getSingleDebouncedPressEh+0x102>
 506:	2b 2d       	mov	r18, r11
 508:	30 e0       	ldi	r19, 0x00	; 0
 50a:	4d 2d       	mov	r20, r13
 50c:	50 e0       	ldi	r21, 0x00	; 0
 50e:	40 95       	com	r20
 510:	50 95       	com	r21
 512:	24 23       	and	r18, r20
 514:	35 23       	and	r19, r21
 516:	21 15       	cp	r18, r1
 518:	31 05       	cpc	r19, r1
 51a:	09 f4       	brne	.+2      	; 0x51e <_ZN20OrangutanPushbuttons23getSingleDebouncedPressEh+0x54>
 51c:	74 c0       	rjmp	.+232    	; 0x606 <_ZN20OrangutanPushbuttons23getSingleDebouncedPressEh+0x13c>
 51e:	cb 20       	and	r12, r11
 520:	c0 92 18 01 	sts	0x0118, r12
 524:	e0 92 19 01 	sts	0x0119, r14
 528:	f0 92 1a 01 	sts	0x011A, r15
 52c:	00 93 1b 01 	sts	0x011B, r16
 530:	10 93 1c 01 	sts	0x011C, r17
 534:	81 e0       	ldi	r24, 0x01	; 1
 536:	80 93 1d 01 	sts	0x011D, r24
 53a:	65 c0       	rjmp	.+202    	; 0x606 <_ZN20OrangutanPushbuttons23getSingleDebouncedPressEh+0x13c>
 53c:	80 91 19 01 	lds	r24, 0x0119
 540:	90 91 1a 01 	lds	r25, 0x011A
 544:	a0 91 1b 01 	lds	r26, 0x011B
 548:	b0 91 1c 01 	lds	r27, 0x011C
 54c:	e8 1a       	sub	r14, r24
 54e:	f9 0a       	sbc	r15, r25
 550:	0a 0b       	sbc	r16, r26
 552:	1b 0b       	sbc	r17, r27
 554:	8f e0       	ldi	r24, 0x0F	; 15
 556:	e8 16       	cp	r14, r24
 558:	f1 04       	cpc	r15, r1
 55a:	01 05       	cpc	r16, r1
 55c:	11 05       	cpc	r17, r1
 55e:	08 f4       	brcc	.+2      	; 0x562 <_ZN20OrangutanPushbuttons23getSingleDebouncedPressEh+0x98>
 560:	52 c0       	rjmp	.+164    	; 0x606 <_ZN20OrangutanPushbuttons23getSingleDebouncedPressEh+0x13c>
 562:	40 91 18 01 	lds	r20, 0x0118
 566:	8d 2d       	mov	r24, r13
 568:	90 e0       	ldi	r25, 0x00	; 0
 56a:	80 95       	com	r24
 56c:	90 95       	com	r25
 56e:	24 2f       	mov	r18, r20
 570:	30 e0       	ldi	r19, 0x00	; 0
 572:	82 23       	and	r24, r18
 574:	93 23       	and	r25, r19
 576:	00 97       	sbiw	r24, 0x00	; 0
 578:	31 f1       	breq	.+76     	; 0x5c6 <_ZN20OrangutanPushbuttons23getSingleDebouncedPressEh+0xfc>
 57a:	82 e0       	ldi	r24, 0x02	; 2
 57c:	80 93 1d 01 	sts	0x011D, r24
 580:	c4 22       	and	r12, r20
 582:	c0 92 18 01 	sts	0x0118, r12
 586:	3f c0       	rjmp	.+126    	; 0x606 <_ZN20OrangutanPushbuttons23getSingleDebouncedPressEh+0x13c>
 588:	40 91 18 01 	lds	r20, 0x0118
 58c:	8d 2d       	mov	r24, r13
 58e:	84 23       	and	r24, r20
 590:	71 f0       	breq	.+28     	; 0x5ae <_ZN20OrangutanPushbuttons23getSingleDebouncedPressEh+0xe4>
 592:	93 e0       	ldi	r25, 0x03	; 3
 594:	90 93 1d 01 	sts	0x011D, r25
 598:	80 93 18 01 	sts	0x0118, r24
 59c:	e0 92 19 01 	sts	0x0119, r14
 5a0:	f0 92 1a 01 	sts	0x011A, r15
 5a4:	00 93 1b 01 	sts	0x011B, r16
 5a8:	10 93 1c 01 	sts	0x011C, r17
 5ac:	2c c0       	rjmp	.+88     	; 0x606 <_ZN20OrangutanPushbuttons23getSingleDebouncedPressEh+0x13c>
 5ae:	50 e0       	ldi	r21, 0x00	; 0
 5b0:	8b 2d       	mov	r24, r11
 5b2:	90 e0       	ldi	r25, 0x00	; 0
 5b4:	2d 2d       	mov	r18, r13
 5b6:	30 e0       	ldi	r19, 0x00	; 0
 5b8:	20 95       	com	r18
 5ba:	30 95       	com	r19
 5bc:	82 23       	and	r24, r18
 5be:	93 23       	and	r25, r19
 5c0:	48 17       	cp	r20, r24
 5c2:	59 07       	cpc	r21, r25
 5c4:	01 f1       	breq	.+64     	; 0x606 <_ZN20OrangutanPushbuttons23getSingleDebouncedPressEh+0x13c>
 5c6:	10 92 1d 01 	sts	0x011D, r1
 5ca:	1d c0       	rjmp	.+58     	; 0x606 <_ZN20OrangutanPushbuttons23getSingleDebouncedPressEh+0x13c>
 5cc:	80 91 19 01 	lds	r24, 0x0119
 5d0:	90 91 1a 01 	lds	r25, 0x011A
 5d4:	a0 91 1b 01 	lds	r26, 0x011B
 5d8:	b0 91 1c 01 	lds	r27, 0x011C
 5dc:	e8 1a       	sub	r14, r24
 5de:	f9 0a       	sbc	r15, r25
 5e0:	0a 0b       	sbc	r16, r26
 5e2:	1b 0b       	sbc	r17, r27
 5e4:	8f e0       	ldi	r24, 0x0F	; 15
 5e6:	e8 16       	cp	r14, r24
 5e8:	f1 04       	cpc	r15, r1
 5ea:	01 05       	cpc	r16, r1
 5ec:	11 05       	cpc	r17, r1
 5ee:	58 f0       	brcs	.+22     	; 0x606 <_ZN20OrangutanPushbuttons23getSingleDebouncedPressEh+0x13c>
 5f0:	80 91 18 01 	lds	r24, 0x0118
 5f4:	8d 21       	and	r24, r13
 5f6:	19 f0       	breq	.+6      	; 0x5fe <_ZN20OrangutanPushbuttons23getSingleDebouncedPressEh+0x134>
 5f8:	10 92 1d 01 	sts	0x011D, r1
 5fc:	05 c0       	rjmp	.+10     	; 0x608 <_ZN20OrangutanPushbuttons23getSingleDebouncedPressEh+0x13e>
 5fe:	92 e0       	ldi	r25, 0x02	; 2
 600:	90 93 1d 01 	sts	0x011D, r25
 604:	01 c0       	rjmp	.+2      	; 0x608 <_ZN20OrangutanPushbuttons23getSingleDebouncedPressEh+0x13e>
 606:	80 e0       	ldi	r24, 0x00	; 0
 608:	1f 91       	pop	r17
 60a:	0f 91       	pop	r16
 60c:	ff 90       	pop	r15
 60e:	ef 90       	pop	r14
 610:	df 90       	pop	r13
 612:	cf 90       	pop	r12
 614:	bf 90       	pop	r11
 616:	08 95       	ret

00000618 <get_single_debounced_button_press>:
 618:	0e 94 65 02 	call	0x4ca	; 0x4ca <_ZN20OrangutanPushbuttons23getSingleDebouncedPressEh>
 61c:	08 95       	ret

0000061e <_ZN13OrangutanTime17delayMicrosecondsEj>:
 61e:	6f 93       	push	r22
 620:	64 e0       	ldi	r22, 0x04	; 4
 622:	6a 95       	dec	r22
 624:	f1 f7       	brne	.-4      	; 0x622 <_ZN13OrangutanTime17delayMicrosecondsEj+0x4>
 626:	6f 91       	pop	r22
 628:	01 97       	sbiw	r24, 0x01	; 1
 62a:	c9 f7       	brne	.-14     	; 0x61e <_ZN13OrangutanTime17delayMicrosecondsEj>
 62c:	08 95       	ret

0000062e <__vector_11>:
 62e:	2f 92       	push	r2
 630:	8f 93       	push	r24
 632:	9f 93       	push	r25
 634:	2f b6       	in	r2, 0x3f	; 63
 636:	80 91 1f 01 	lds	r24, 0x011F
 63a:	90 91 20 01 	lds	r25, 0x0120
 63e:	01 96       	adiw	r24, 0x01	; 1
 640:	80 93 1f 01 	sts	0x011F, r24
 644:	90 93 20 01 	sts	0x0120, r25
 648:	90 e0       	ldi	r25, 0x00	; 0
 64a:	80 91 21 01 	lds	r24, 0x0121
 64e:	89 1f       	adc	r24, r25
 650:	80 93 21 01 	sts	0x0121, r24
 654:	90 91 27 01 	lds	r25, 0x0127
 658:	9c 5f       	subi	r25, 0xFC	; 252
 65a:	90 93 27 01 	sts	0x0127, r25
 65e:	80 91 26 01 	lds	r24, 0x0126
 662:	80 51       	subi	r24, 0x10	; 16
 664:	97 42       	sbci	r25, 0x27	; 39
 666:	c0 f0       	brcs	.+48     	; 0x698 <end>
 668:	90 93 27 01 	sts	0x0127, r25
 66c:	80 93 26 01 	sts	0x0126, r24
 670:	80 91 22 01 	lds	r24, 0x0122
 674:	90 91 23 01 	lds	r25, 0x0123
 678:	01 96       	adiw	r24, 0x01	; 1
 67a:	80 93 22 01 	sts	0x0122, r24
 67e:	90 93 23 01 	sts	0x0123, r25
 682:	90 e0       	ldi	r25, 0x00	; 0
 684:	80 91 24 01 	lds	r24, 0x0124
 688:	89 1f       	adc	r24, r25
 68a:	80 93 24 01 	sts	0x0124, r24
 68e:	80 91 25 01 	lds	r24, 0x0125
 692:	89 1f       	adc	r24, r25
 694:	80 93 25 01 	sts	0x0125, r24

00000698 <end>:
 698:	2f be       	out	0x3f, r2	; 63
 69a:	9f 91       	pop	r25
 69c:	8f 91       	pop	r24
 69e:	2f 90       	pop	r2
 6a0:	18 95       	reti

000006a2 <_ZN13OrangutanTime17delayMillisecondsEj>:
 6a2:	cf 93       	push	r28
 6a4:	df 93       	push	r29
 6a6:	ec 01       	movw	r28, r24
 6a8:	05 c0       	rjmp	.+10     	; 0x6b4 <_ZN13OrangutanTime17delayMillisecondsEj+0x12>
 6aa:	88 ee       	ldi	r24, 0xE8	; 232
 6ac:	93 e0       	ldi	r25, 0x03	; 3
 6ae:	0e 94 0f 03 	call	0x61e	; 0x61e <_ZN13OrangutanTime17delayMicrosecondsEj>
 6b2:	21 97       	sbiw	r28, 0x01	; 1
 6b4:	20 97       	sbiw	r28, 0x00	; 0
 6b6:	c9 f7       	brne	.-14     	; 0x6aa <_ZN13OrangutanTime17delayMillisecondsEj+0x8>
 6b8:	df 91       	pop	r29
 6ba:	cf 91       	pop	r28
 6bc:	08 95       	ret

000006be <delay_ms>:
 6be:	0e 94 51 03 	call	0x6a2	; 0x6a2 <_ZN13OrangutanTime17delayMillisecondsEj>
 6c2:	08 95       	ret

000006c4 <_ZN13OrangutanTime5init2Ev>:
 6c4:	e0 e7       	ldi	r30, 0x70	; 112
 6c6:	f0 e0       	ldi	r31, 0x00	; 0
 6c8:	80 81       	ld	r24, Z
 6ca:	8e 7f       	andi	r24, 0xFE	; 254
 6cc:	80 83       	st	Z, r24
 6ce:	a0 eb       	ldi	r26, 0xB0	; 176
 6d0:	b0 e0       	ldi	r27, 0x00	; 0
 6d2:	8c 91       	ld	r24, X
 6d4:	83 60       	ori	r24, 0x03	; 3
 6d6:	8c 93       	st	X, r24
 6d8:	a1 eb       	ldi	r26, 0xB1	; 177
 6da:	b0 e0       	ldi	r27, 0x00	; 0
 6dc:	8c 91       	ld	r24, X
 6de:	80 7f       	andi	r24, 0xF0	; 240
 6e0:	8c 93       	st	X, r24
 6e2:	8c 91       	ld	r24, X
 6e4:	82 60       	ori	r24, 0x02	; 2
 6e6:	8c 93       	st	X, r24
 6e8:	b8 9a       	sbi	0x17, 0	; 23
 6ea:	80 81       	ld	r24, Z
 6ec:	81 60       	ori	r24, 0x01	; 1
 6ee:	80 83       	st	Z, r24
 6f0:	78 94       	sei
 6f2:	08 95       	ret

000006f4 <_ZN13OrangutanTime4initEv>:
 6f4:	80 91 28 01 	lds	r24, 0x0128
 6f8:	88 23       	and	r24, r24
 6fa:	29 f4       	brne	.+10     	; 0x706 <_ZN13OrangutanTime4initEv+0x12>
 6fc:	81 e0       	ldi	r24, 0x01	; 1
 6fe:	80 93 28 01 	sts	0x0128, r24
 702:	0e 94 62 03 	call	0x6c4	; 0x6c4 <_ZN13OrangutanTime5init2Ev>
 706:	08 95       	ret

00000708 <_ZN13OrangutanTime2msEv>:
 708:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <_ZN13OrangutanTime4initEv>
 70c:	e0 e7       	ldi	r30, 0x70	; 112
 70e:	f0 e0       	ldi	r31, 0x00	; 0
 710:	80 81       	ld	r24, Z
 712:	8e 7f       	andi	r24, 0xFE	; 254
 714:	80 83       	st	Z, r24
 716:	20 91 22 01 	lds	r18, 0x0122
 71a:	30 91 23 01 	lds	r19, 0x0123
 71e:	40 91 24 01 	lds	r20, 0x0124
 722:	50 91 25 01 	lds	r21, 0x0125
 726:	80 81       	ld	r24, Z
 728:	81 60       	ori	r24, 0x01	; 1
 72a:	80 83       	st	Z, r24
 72c:	b9 01       	movw	r22, r18
 72e:	ca 01       	movw	r24, r20
 730:	08 95       	ret

00000732 <get_ms>:
 732:	0e 94 84 03 	call	0x708	; 0x708 <_ZN13OrangutanTime2msEv>
 736:	08 95       	ret

00000738 <_ZN13OrangutanTime5resetEv>:
 738:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <_ZN13OrangutanTime4initEv>
 73c:	e0 e7       	ldi	r30, 0x70	; 112
 73e:	f0 e0       	ldi	r31, 0x00	; 0
 740:	80 81       	ld	r24, Z
 742:	8e 7f       	andi	r24, 0xFE	; 254
 744:	80 83       	st	Z, r24
 746:	10 92 22 01 	sts	0x0122, r1
 74a:	10 92 23 01 	sts	0x0123, r1
 74e:	10 92 24 01 	sts	0x0124, r1
 752:	10 92 25 01 	sts	0x0125, r1
 756:	10 92 27 01 	sts	0x0127, r1
 75a:	10 92 26 01 	sts	0x0126, r1
 75e:	80 81       	ld	r24, Z
 760:	81 60       	ori	r24, 0x01	; 1
 762:	80 83       	st	Z, r24
 764:	08 95       	ret

00000766 <time_reset>:
 766:	0e 94 9c 03 	call	0x738	; 0x738 <_ZN13OrangutanTime5resetEv>
 76a:	08 95       	ret

0000076c <__prologue_saves__>:
 76c:	2f 92       	push	r2
 76e:	3f 92       	push	r3
 770:	4f 92       	push	r4
 772:	5f 92       	push	r5
 774:	6f 92       	push	r6
 776:	7f 92       	push	r7
 778:	8f 92       	push	r8
 77a:	9f 92       	push	r9
 77c:	af 92       	push	r10
 77e:	bf 92       	push	r11
 780:	cf 92       	push	r12
 782:	df 92       	push	r13
 784:	ef 92       	push	r14
 786:	ff 92       	push	r15
 788:	0f 93       	push	r16
 78a:	1f 93       	push	r17
 78c:	cf 93       	push	r28
 78e:	df 93       	push	r29
 790:	cd b7       	in	r28, 0x3d	; 61
 792:	de b7       	in	r29, 0x3e	; 62
 794:	ca 1b       	sub	r28, r26
 796:	db 0b       	sbc	r29, r27
 798:	0f b6       	in	r0, 0x3f	; 63
 79a:	f8 94       	cli
 79c:	de bf       	out	0x3e, r29	; 62
 79e:	0f be       	out	0x3f, r0	; 63
 7a0:	cd bf       	out	0x3d, r28	; 61
 7a2:	09 94       	ijmp

000007a4 <__epilogue_restores__>:
 7a4:	2a 88       	ldd	r2, Y+18	; 0x12
 7a6:	39 88       	ldd	r3, Y+17	; 0x11
 7a8:	48 88       	ldd	r4, Y+16	; 0x10
 7aa:	5f 84       	ldd	r5, Y+15	; 0x0f
 7ac:	6e 84       	ldd	r6, Y+14	; 0x0e
 7ae:	7d 84       	ldd	r7, Y+13	; 0x0d
 7b0:	8c 84       	ldd	r8, Y+12	; 0x0c
 7b2:	9b 84       	ldd	r9, Y+11	; 0x0b
 7b4:	aa 84       	ldd	r10, Y+10	; 0x0a
 7b6:	b9 84       	ldd	r11, Y+9	; 0x09
 7b8:	c8 84       	ldd	r12, Y+8	; 0x08
 7ba:	df 80       	ldd	r13, Y+7	; 0x07
 7bc:	ee 80       	ldd	r14, Y+6	; 0x06
 7be:	fd 80       	ldd	r15, Y+5	; 0x05
 7c0:	0c 81       	ldd	r16, Y+4	; 0x04
 7c2:	1b 81       	ldd	r17, Y+3	; 0x03
 7c4:	aa 81       	ldd	r26, Y+2	; 0x02
 7c6:	b9 81       	ldd	r27, Y+1	; 0x01
 7c8:	ce 0f       	add	r28, r30
 7ca:	d1 1d       	adc	r29, r1
 7cc:	0f b6       	in	r0, 0x3f	; 63
 7ce:	f8 94       	cli
 7d0:	de bf       	out	0x3e, r29	; 62
 7d2:	0f be       	out	0x3f, r0	; 63
 7d4:	cd bf       	out	0x3d, r28	; 61
 7d6:	ed 01       	movw	r28, r26
 7d8:	08 95       	ret

000007da <_exit>:
 7da:	f8 94       	cli

000007dc <__stop_program>:
 7dc:	ff cf       	rjmp	.-2      	; 0x7dc <__stop_program>
